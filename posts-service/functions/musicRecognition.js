var url = require("url");
var fs = require("fs");
var crypto = require("crypto");
var request = require("request");
var Music = require("../models/Music")
const { streamToBuffer } = require("@jorgeferrero/stream-to-buffer");
const axios = require("axios")

var defaultOptions = {
  host: "identify-eu-west-1.acrcloud.com",
  endpoint: "/v1/identify",
  signature_version: "1",
  data_type: "audio",
  secure: true,
  access_key: "318a170ca22ac187f50973e24e62d924",
  access_secret: "sEgepjxv6eWDNB27jYTzJHApnQyJR0hhZcDz4T0w",
};

function buildStringToSign(
  method,
  uri,
  accessKey,
  dataType,
  signatureVersion,
  timestamp
) {
  return [method, uri, accessKey, dataType, signatureVersion, timestamp].join(
    "\n"
  );
}

function sign(signString, accessSecret) {
  return crypto
    .createHmac("sha1", accessSecret)
    .update(Buffer.from(signString, "utf-8"))
    .digest()
    .toString("base64");
}

/**
 * Identifies a sample of bytes
 */
function identify(data, options, cb) {
  var current_data = new Date();
  var timestamp = current_data.getTime() / 1000;

  var stringToSign = buildStringToSign(
    "POST",
    options.endpoint,
    options.access_key,
    options.data_type,
    options.signature_version,
    timestamp
  );

  var signature = sign(stringToSign, options.access_secret);

  var formData = {
    sample: data,
    access_key: options.access_key,
    data_type: options.data_type,
    signature_version: options.signature_version,
    signature: signature,
    sample_bytes: data.length,
    timestamp: timestamp,
  };
  request.post(
    {
      url: "http://" + options.host + options.endpoint,
      method: "POST",
      formData: formData,
    },
    cb
  );
}


module.exports = function recognition (file_stream,user) {
 return new Promise(async (resolve,reject)=>{
   const bitmap = fs.readFileSync(file_stream);
   console.log("inside recognition");
   identify( Buffer.from(bitmap), defaultOptions, async function (err, httpResponse, body ) {
     console.log("inside callback music");
     if (err) {
       console.log(err);
       return resolve(null);
     }
     const result = JSON.parse(body);
     let albumImage = null;
     if (
       result.status.msg != "No result" &&
       result.status.msg != "Can't generate fingerprint"
     ) {
       if (result.metadata.music[0].external_metadata.deezer) {
         const deezer_result = await axios.get(
           `https://api.deezer.com/track/${result.metadata.music[0].external_metadata.deezer.track.id}`
         );
         console.log(result.metadata.music[0].external_metadata);
         console.log(deezer_result.data);
         if (deezer_result.data.album)
           albumImage = deezer_result.data.album.cover_medium;
       }
       const created_music = await Music.findOneAndUpdate(
         {
           name: result.metadata.music[0].title,
           author: result.metadata.music[0].artists[0].name,
           generatedby: user._id,
           generatedByName: user.fullName,
           autogenerated: true,
           albumImage,
         },
         { autogenerated: true, $inc: { usedCount: 1 } },
         { upsert: true, setDefaultsOnInsert: true, new: true }
       );
       return resolve(created_music._id);
     } else {
       const created_music = await Music.create({
         author: user.fullName,
         generatedby: user._id,
         autogenerated: true,
         generatedByName: user.fullName,
       });
       console.log(created_music);
       return resolve(created_music._id);
     }
   });
 })
}

